"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useEffect, useState } from "react";
import clsx from "clsx";
import { Menu, Settings, Home, Users, DollarSign, Shield  } from "lucide-react";
import { fetchCategories } from "@/store/categorySlice";
import { useDispatch, UseDispatch, useSelector } from "react-redux";
import { RootState } from "@/store/store";
import { useAppDispatch } from "@/store/hooks";

// const navItems = [
//   { name: "–ì–ª–∞–≤–Ω–∞—è", href: "/dashboard", icon: <Home size={20} /> },
//   { name: "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", href: "/dashboard/cybersecurity", icon: <Shield size={20} /> },
//   { name: "–ü—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ", href: "/dashboard/suppliers", icon: <Users size={20} /> },
//   { name: "–ë–µ–ª—ã–π —Ö–∞–∫–µ—Ä", href: "dashboard/hac", icon: <Shield size={20} /> },
//   { name: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", href: "/dashboard/englis", icon: <Settings size={20} /> },
  
// ];

const getCategoryIcon = (slug: string) => {
  switch (slug) {
    case "cybersecurity":
      return <Shield size={20} />;
    case "programming":
      return <Users size={20} />;
    case "english":
      return <Settings size={20} />;
    case "devops":
      return <Home size={20} />;
    default:
      return <Shield size={25} />; // –∏–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
};

interface SidebarProps {
  isOpen: boolean;
  onClose: () => void;
  isCollapsed: boolean;
  toggleCollapse: () => void;
}

const Sidebar = ({ isOpen, onClose, isCollapsed, toggleCollapse  }: SidebarProps) => {
  const pathname = usePathname();
  const dispatch = useAppDispatch();

  const {categories, loading: catLoading, error} = useSelector(
    (state: RootState) => state.category
  );

  const {loading: authLoading, user} = useSelector(
    (state:RootState) => state.auth
  )

  useEffect(()=>{
    if(user && categories.length === 0){
      dispatch(fetchCategories());   
    }     
  },[dispatch, user])

  console.log("categories@@@ ", categories)

  // const [isCollapsed, setIsCollapsed] = useState(false); // ‚Üê —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è

  return (
    <aside
      className={clsx(
        "fixed top-0 left-0 h-screen bg-white border-r shadow-md z-20 transition-all duration-300",
        // üëâ –º–æ–±–∏–ª–∫–∞: —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ isOpen
        "md:translate-x-0", // –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–µ–Ω
        isOpen ? "translate-x-0" : "-translate-x-full md:translate-x-0", // ‚Üê –Ω–∞ –º–æ–±–∏–ª–∫–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        isCollapsed ? "w-20" : "w-48"
      )}
    >
      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–º–æ–±–∏–ª–∫–∞) */}
      <button
        onClick={onClose}
        className="absolute top-4 right-4 text-xl md:hidden"
      >
        ‚úï
      </button>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–≤–µ—Ä–Ω—É—Ç—å (–¥–µ—Å–∫—Ç–æ–ø) */}
      <div className="hidden md:flex justify-end">
        <button
          onClick={toggleCollapse}
          className="text-gray-500 hover:text-gray-800 p-1"
        >
          {isCollapsed ? "‚Üí" : "‚Üê"}
        </button>
      </div>

      <div className="mt-4 space-y-2">

        {categories.map((item) => (
         <Link
         key={item.id}
         href={`/dashboard/${ item.slug}`}
         onClick={() => {
           if (window.innerWidth < 768) {
             onClose();
           }
         }}
         className="block"
       >
         <span
           className={clsx(
             "flex items-center gap-3 py-2 px-3 rounded hover:bg-gray-100 w-full",
             pathname === item.href && "bg-gray-200 font-medium"
           )}
         >
           <span className="flex-shrink-0"> {getCategoryIcon(item.slug)}</span>
           {!isCollapsed && (
             <span className="truncate">{item.name}</span>
           )}
         </span>
       </Link>
        ))}
      </div>
    </aside>
  );
};

export default Sidebar;
