import axios from "axios";

const API_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const api = axios.create({
  baseURL: API_URL,
  withCredentials: true,  // ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å
  headers: {
    "Content-Type": "application/json",
  },
});

// üî• –°–æ–∑–¥–∞–µ–º `axios` –±–µ–∑ –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä–æ–≤ (—á—Ç–æ–±—ã `refreshToken()` —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
const axiosWithoutInterceptor = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è `access_token`
let isRefreshing = false;
const refreshToken = async () => {
  if(isRefreshing) return null;
  isRefreshing = true;

  try {
    const response = await axiosWithoutInterceptor.post("/api/auth/refresh/", null, {
      withCredentials: true, // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ httpOnly –∫—É–∫–∏
    }); // `refresh_token` –±–µ—Ä—ë—Ç—Å—è –∏–∑ cookie
    sessionStorage.setItem("token", response.data.access); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º `access_token`
    return response.data.access;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
    sessionStorage.removeItem("token"); // ‚úÖ –£–¥–∞–ª—è–µ–º `access_token`
    return null;
  }
};

// ‚úÖ –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π)
api.interceptors.request.use((config) => {
  const token = typeof window !== "undefined" ? sessionStorage.getItem("token") : null;

  // –ü—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ **–Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏**
  const noAuthRoutes = ["/api/auth/register/", "/api/auth/verify-email/"];

  if (token && !noAuthRoutes.includes(config.url || "")) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

//‚úÖ –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ (–µ—Å–ª–∏ 401, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω)
api.interceptors.response.use(
  (response) => response, // ‚úÖ –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  async (error) => {
    const originalRequest = error.config;

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 (Unauthorized) –∏ –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true; // ‚úÖ –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å

      const newAccessToken = await refreshToken();
      if (newAccessToken) {
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –µ–≥–æ
        sessionStorage.setItem("token", newAccessToken);
        api.defaults.headers.Authorization = `Bearer ${newAccessToken}`;
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
        return api(originalRequest);
      }
    }

    return Promise.reject(error);
  }
);

export default api;